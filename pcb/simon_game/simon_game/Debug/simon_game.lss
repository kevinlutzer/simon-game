
simon_game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  000007aa  0000083e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000007aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000198  00800108  00800108  00000846  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000846  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000876  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000695  00000000  00000000  0000090e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000288  00000000  00000000  00000fa3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000350  00000000  00000000  0000122b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000238  00000000  00000000  0000157c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000389  00000000  00000000  000017b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005fa  00000000  00000000  00001b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000088  00000000  00000000  00002137  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 24 02 	jmp	0x448	; 0x448 <__vector_3>
  10:	0c 94 68 02 	jmp	0x4d0	; 0x4d0 <__vector_4>
  14:	0c 94 ac 02 	jmp	0x558	; 0x558 <__vector_5>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea ea       	ldi	r30, 0xAA	; 170
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 30       	cpi	r26, 0x08	; 8
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a8 e0       	ldi	r26, 0x08	; 8
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 3a       	cpi	r26, 0xA0	; 160
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 d0 01 	call	0x3a0	; 0x3a0 <main>
  9e:	0c 94 d3 03 	jmp	0x7a6	; 0x7a6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <_Z9ClearLedsv>:
bool checkingRound = false; 

// turn off all leds
void ClearLeds(void)
{
	PORTD &= ~(1 << PORTD2);
  a6:	5a 98       	cbi	0x0b, 2	; 11
	PORTB &= ~(1 << PORTB7);
  a8:	2f 98       	cbi	0x05, 7	; 5
	PORTB &= ~(1 << PORTB4);
  aa:	2c 98       	cbi	0x05, 4	; 5
	PORTC &= ~(1 << PORTC1);
  ac:	41 98       	cbi	0x08, 1	; 8
  ae:	08 95       	ret

000000b0 <_Z8InitGpiov>:
// initialize the gpio
void InitGpio(void)
{
	
	// LEDs 
	DDRD |= (1 << DDD2);  // Led 1  
  b0:	52 9a       	sbi	0x0a, 2	; 10
	DDRB |= (1 << DDB7) | (1 << DDB4); // Led 2 and 4
  b2:	84 b1       	in	r24, 0x04	; 4
  b4:	80 69       	ori	r24, 0x90	; 144
  b6:	84 b9       	out	0x04, r24	; 4
	DDRC |= (1 << DDC1); // Led 3
  b8:	39 9a       	sbi	0x07, 1	; 7

	// PBs 
	DDRD &= (~(1 << DDD3) | ~(1 << DDD5));
  ba:	8a b1       	in	r24, 0x0a	; 10
  bc:	8a b9       	out	0x0a, r24	; 10
	DDRC &= ~(1 << DDC2);
  be:	3a 98       	cbi	0x07, 2	; 7
	DDRB &= ~(1 << DDB5);
  c0:	25 98       	cbi	0x04, 5	; 4
	
	// Pullups
	PORTC |= (1 << PORTC2);
  c2:	42 9a       	sbi	0x08, 2	; 8
	PORTD |= (1 << PORTD3) | (1 << PORTD5);
  c4:	8b b1       	in	r24, 0x0b	; 11
  c6:	88 62       	ori	r24, 0x28	; 40
  c8:	8b b9       	out	0x0b, r24	; 11
	PORTB |= (1 << PORTB5);
  ca:	2d 9a       	sbi	0x05, 5	; 5
  cc:	08 95       	ret

000000ce <_Z14InitInterruptsv>:
}
// initialize the hardware interrupts
void InitInterrupts(void)
{
	// enable interrupt masks
	PCICR |= (1 << PCIE2);
  ce:	e8 e6       	ldi	r30, 0x68	; 104
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	80 81       	ld	r24, Z
  d4:	84 60       	ori	r24, 0x04	; 4
  d6:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE1);
  d8:	80 81       	ld	r24, Z
  da:	82 60       	ori	r24, 0x02	; 2
  dc:	80 83       	st	Z, r24
	PCICR |= (1 << PCIE0);
  de:	80 81       	ld	r24, Z
  e0:	81 60       	ori	r24, 0x01	; 1
  e2:	80 83       	st	Z, r24
	
	// enable pin change interrupts for certain GPIO
	PCMSK1 |= (1 << PCINT10);
  e4:	ec e6       	ldi	r30, 0x6C	; 108
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	84 60       	ori	r24, 0x04	; 4
  ec:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT19);
  ee:	ed e6       	ldi	r30, 0x6D	; 109
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	80 81       	ld	r24, Z
  f4:	88 60       	ori	r24, 0x08	; 8
  f6:	80 83       	st	Z, r24
	PCMSK2 |= (1 << PCINT21);
  f8:	80 81       	ld	r24, Z
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT5);
  fe:	eb e6       	ldi	r30, 0x6B	; 107
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	80 62       	ori	r24, 0x20	; 32
 106:	80 83       	st	Z, r24
	
	// enable the global interrupts
	sei();
 108:	78 94       	sei
 10a:	08 95       	ret

0000010c <_Z9BlinkLedsv>:
}
// blinks the leds at a frequency of 2 hz 
void BlinkLeds(void)
{
	PORTD |= (1 << PORTD2);
 10c:	5a 9a       	sbi	0x0b, 2	; 11
	PORTB |= (1 << PORTB7) | (1 << PORTB4);
 10e:	85 b1       	in	r24, 0x05	; 5
 110:	80 69       	ori	r24, 0x90	; 144
 112:	85 b9       	out	0x05, r24	; 5
	PORTC |= (1 << PORTC1);
 114:	41 9a       	sbi	0x08, 1	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 116:	83 e2       	ldi	r24, 0x23	; 35
 118:	94 ef       	ldi	r25, 0xF4	; 244
 11a:	01 97       	sbiw	r24, 0x01	; 1
 11c:	f1 f7       	brne	.-4      	; 0x11a <_Z9BlinkLedsv+0xe>
 11e:	00 c0       	rjmp	.+0      	; 0x120 <_Z9BlinkLedsv+0x14>
 120:	00 00       	nop
	
	_delay_ms(250);
	ClearLeds();
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z9ClearLedsv>
 126:	83 e2       	ldi	r24, 0x23	; 35
 128:	94 ef       	ldi	r25, 0xF4	; 244
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <_Z9BlinkLedsv+0x1e>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <_Z9BlinkLedsv+0x24>
 130:	00 00       	nop
 132:	08 95       	ret

00000134 <_Z8FillListv>:
		PORTC &= ~(1 << PORTC1);
	}
}
// fills the created list with random sequences
void FillList(void)
{
 134:	9f 92       	push	r9
 136:	af 92       	push	r10
 138:	bf 92       	push	r11
 13a:	cf 92       	push	r12
 13c:	df 92       	push	r13
 13e:	ef 92       	push	r14
 140:	ff 92       	push	r15
 142:	0f 93       	push	r16
 144:	1f 93       	push	r17
 146:	cf 93       	push	r28
 148:	df 93       	push	r29
	int r_num;
	for(int ii = 0; ii < k; ii ++)
 14a:	80 91 05 01 	lds	r24, 0x0105
 14e:	90 91 06 01 	lds	r25, 0x0106
 152:	18 16       	cp	r1, r24
 154:	19 06       	cpc	r1, r25
 156:	0c f0       	brlt	.+2      	; 0x15a <_Z8FillListv+0x26>
 158:	69 c0       	rjmp	.+210    	; 0x22c <_Z8FillListv+0xf8>
 15a:	0f 2e       	mov	r0, r31
 15c:	fe e0       	ldi	r31, 0x0E	; 14
 15e:	af 2e       	mov	r10, r31
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	bf 2e       	mov	r11, r31
 164:	f0 2d       	mov	r31, r0
 166:	0f 2e       	mov	r0, r31
 168:	ff e0       	ldi	r31, 0x0F	; 15
 16a:	cf 2e       	mov	r12, r31
 16c:	f1 e0       	ldi	r31, 0x01	; 1
 16e:	df 2e       	mov	r13, r31
 170:	f0 2d       	mov	r31, r0
 172:	0f 2e       	mov	r0, r31
 174:	f0 e1       	ldi	r31, 0x10	; 16
 176:	ef 2e       	mov	r14, r31
 178:	f1 e0       	ldi	r31, 0x01	; 1
 17a:	ff 2e       	mov	r15, r31
 17c:	f0 2d       	mov	r31, r0
 17e:	01 e1       	ldi	r16, 0x11	; 17
 180:	11 e0       	ldi	r17, 0x01	; 1
 182:	c0 e0       	ldi	r28, 0x00	; 0
 184:	d0 e0       	ldi	r29, 0x00	; 0
		else if(r_num > 191)
		{
			list[ii].BUT1 = false;
			list[ii].BUT2 = false;
			list[ii].SCK = false;
			list[ii].BUT3 = true;
 186:	99 24       	eor	r9, r9
 188:	93 94       	inc	r9
void FillList(void)
{
	int r_num;
	for(int ii = 0; ii < k; ii ++)
	{
		r_num = rand() % 256;
 18a:	0e 94 60 03 	call	0x6c0	; 0x6c0 <rand>
 18e:	90 78       	andi	r25, 0x80	; 128
 190:	99 23       	and	r25, r25
 192:	1c f4       	brge	.+6      	; 0x19a <_Z8FillListv+0x66>
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	9f 6f       	ori	r25, 0xFF	; 255
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	9c 01       	movw	r18, r24
		if(r_num < 64)
 19c:	80 34       	cpi	r24, 0x40	; 64
 19e:	91 05       	cpc	r25, r1
 1a0:	4c f4       	brge	.+18     	; 0x1b4 <_Z8FillListv+0x80>
		{
			list[ii].BUT1 = true;
 1a2:	f5 01       	movw	r30, r10
 1a4:	90 82       	st	Z, r9
			list[ii].BUT2 = false;
 1a6:	f6 01       	movw	r30, r12
 1a8:	10 82       	st	Z, r1
			list[ii].SCK = false;
 1aa:	f7 01       	movw	r30, r14
 1ac:	10 82       	st	Z, r1
			list[ii].BUT3 = false;
 1ae:	f8 01       	movw	r30, r16
 1b0:	10 82       	st	Z, r1
 1b2:	28 c0       	rjmp	.+80     	; 0x204 <_Z8FillListv+0xd0>
		}
		else if(r_num > 63 && r_num < 128)
 1b4:	ac 01       	movw	r20, r24
 1b6:	40 54       	subi	r20, 0x40	; 64
 1b8:	51 09       	sbc	r21, r1
 1ba:	40 34       	cpi	r20, 0x40	; 64
 1bc:	51 05       	cpc	r21, r1
 1be:	48 f4       	brcc	.+18     	; 0x1d2 <_Z8FillListv+0x9e>
		{
			list[ii].BUT1 = false;
 1c0:	f5 01       	movw	r30, r10
 1c2:	10 82       	st	Z, r1
			list[ii].BUT2 = true;
 1c4:	f6 01       	movw	r30, r12
 1c6:	90 82       	st	Z, r9
			list[ii].SCK = false;
 1c8:	f7 01       	movw	r30, r14
 1ca:	10 82       	st	Z, r1
			list[ii].BUT3 = false;
 1cc:	f8 01       	movw	r30, r16
 1ce:	10 82       	st	Z, r1
 1d0:	19 c0       	rjmp	.+50     	; 0x204 <_Z8FillListv+0xd0>
		}
		else if(r_num > 127 && r_num < 192)
 1d2:	80 58       	subi	r24, 0x80	; 128
 1d4:	91 09       	sbc	r25, r1
 1d6:	80 34       	cpi	r24, 0x40	; 64
 1d8:	91 05       	cpc	r25, r1
 1da:	48 f4       	brcc	.+18     	; 0x1ee <_Z8FillListv+0xba>
		{
			list[ii].BUT1 = false;
 1dc:	f5 01       	movw	r30, r10
 1de:	10 82       	st	Z, r1
			list[ii].BUT2 = false;
 1e0:	f6 01       	movw	r30, r12
 1e2:	10 82       	st	Z, r1
			list[ii].SCK = true;
 1e4:	f7 01       	movw	r30, r14
 1e6:	90 82       	st	Z, r9
			list[ii].BUT3 = false;
 1e8:	f8 01       	movw	r30, r16
 1ea:	10 82       	st	Z, r1
 1ec:	0b c0       	rjmp	.+22     	; 0x204 <_Z8FillListv+0xd0>
		}
		else if(r_num > 191)
 1ee:	20 3c       	cpi	r18, 0xC0	; 192
 1f0:	31 05       	cpc	r19, r1
 1f2:	44 f0       	brlt	.+16     	; 0x204 <_Z8FillListv+0xd0>
		{
			list[ii].BUT1 = false;
 1f4:	f5 01       	movw	r30, r10
 1f6:	10 82       	st	Z, r1
			list[ii].BUT2 = false;
 1f8:	f6 01       	movw	r30, r12
 1fa:	10 82       	st	Z, r1
			list[ii].SCK = false;
 1fc:	f7 01       	movw	r30, r14
 1fe:	10 82       	st	Z, r1
			list[ii].BUT3 = true;
 200:	f8 01       	movw	r30, r16
 202:	90 82       	st	Z, r9
}
// fills the created list with random sequences
void FillList(void)
{
	int r_num;
	for(int ii = 0; ii < k; ii ++)
 204:	21 96       	adiw	r28, 0x01	; 1
 206:	f4 e0       	ldi	r31, 0x04	; 4
 208:	af 0e       	add	r10, r31
 20a:	b1 1c       	adc	r11, r1
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	c8 0e       	add	r12, r24
 210:	d1 1c       	adc	r13, r1
 212:	e4 e0       	ldi	r30, 0x04	; 4
 214:	ee 0e       	add	r14, r30
 216:	f1 1c       	adc	r15, r1
 218:	0c 5f       	subi	r16, 0xFC	; 252
 21a:	1f 4f       	sbci	r17, 0xFF	; 255
 21c:	80 91 05 01 	lds	r24, 0x0105
 220:	90 91 06 01 	lds	r25, 0x0106
 224:	c8 17       	cp	r28, r24
 226:	d9 07       	cpc	r29, r25
 228:	0c f4       	brge	.+2      	; 0x22c <_Z8FillListv+0xf8>
 22a:	af cf       	rjmp	.-162    	; 0x18a <_Z8FillListv+0x56>
			list[ii].BUT2 = false;
			list[ii].SCK = false;
			list[ii].BUT3 = true;
		}
	}
}
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	1f 91       	pop	r17
 232:	0f 91       	pop	r16
 234:	ff 90       	pop	r15
 236:	ef 90       	pop	r14
 238:	df 90       	pop	r13
 23a:	cf 90       	pop	r12
 23c:	bf 90       	pop	r11
 23e:	af 90       	pop	r10
 240:	9f 90       	pop	r9
 242:	08 95       	ret

00000244 <_Z7InitAdcv>:
	}
}
// initialize the adc module 
void InitAdc()
{
	ADCSRA |= _BV(ADEN);
 244:	ea e7       	ldi	r30, 0x7A	; 122
 246:	f0 e0       	ldi	r31, 0x00	; 0
 248:	80 81       	ld	r24, Z
 24a:	80 68       	ori	r24, 0x80	; 128
 24c:	80 83       	st	Z, r24
 24e:	08 95       	ret

00000250 <_Z7AdcReadv>:
}
// read data from the adc module 
uint16_t AdcRead(void) {
	ADMUX	&=	0xf0;
 250:	ec e7       	ldi	r30, 0x7C	; 124
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	80 7f       	andi	r24, 0xF0	; 240
 258:	80 83       	st	Z, r24
	ADMUX	|=	0;
 25a:	80 81       	ld	r24, Z
 25c:	80 83       	st	Z, r24
 	ADCSRA |= _BV(ADSC);
 25e:	ea e7       	ldi	r30, 0x7A	; 122
 260:	f0 e0       	ldi	r31, 0x00	; 0
 262:	80 81       	ld	r24, Z
 264:	80 64       	ori	r24, 0x40	; 64
 266:	80 83       	st	Z, r24
 	while ( (ADCSRA & _BV(ADSC)) );
 268:	80 81       	ld	r24, Z
 26a:	86 fd       	sbrc	r24, 6
 26c:	fd cf       	rjmp	.-6      	; 0x268 <_Z7AdcReadv+0x18>
 	return ADC;
 26e:	80 91 78 00 	lds	r24, 0x0078
 272:	90 91 79 00 	lds	r25, 0x0079
}
 276:	08 95       	ret

00000278 <_Z19DisplayListSequencev>:
// display the list sequence using leds. 
void DisplayListSequence(void)
{
 278:	0f 93       	push	r16
 27a:	1f 93       	push	r17
 27c:	cf 93       	push	r28
 27e:	df 93       	push	r29
	list[4].BUT1 == true;
	for(int ii = j; ii >= 0 ; ii --)
 280:	00 91 9e 02 	lds	r16, 0x029E
 284:	10 91 9f 02 	lds	r17, 0x029F
 288:	11 23       	and	r17, r17
 28a:	0c f4       	brge	.+2      	; 0x28e <_Z19DisplayListSequencev+0x16>
 28c:	47 c0       	rjmp	.+142    	; 0x31c <_Z19DisplayListSequencev+0xa4>
	{
		if(commonFlag)
 28e:	80 91 09 01 	lds	r24, 0x0109
 292:	81 11       	cpse	r24, r1
 294:	43 c0       	rjmp	.+134    	; 0x31c <_Z19DisplayListSequencev+0xa4>
 296:	e8 01       	movw	r28, r16
 298:	cc 0f       	add	r28, r28
 29a:	dd 1f       	adc	r29, r29
 29c:	cc 0f       	add	r28, r28
 29e:	dd 1f       	adc	r29, r29
 2a0:	cf 5e       	subi	r28, 0xEF	; 239
 2a2:	de 4f       	sbci	r29, 0xFE	; 254
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <_Z19DisplayListSequencev+0x38>
 2a6:	24 97       	sbiw	r28, 0x04	; 4
 2a8:	80 91 09 01 	lds	r24, 0x0109
 2ac:	81 11       	cpse	r24, r1
 2ae:	36 c0       	rjmp	.+108    	; 0x31c <_Z19DisplayListSequencev+0xa4>
 2b0:	fe 01       	movw	r30, r28
 2b2:	33 97       	sbiw	r30, 0x03	; 3
		{
			break;
		}
		else if(list[ii].BUT1)
 2b4:	80 81       	ld	r24, Z
 2b6:	88 23       	and	r24, r24
 2b8:	29 f0       	breq	.+10     	; 0x2c4 <_Z19DisplayListSequencev+0x4c>
		{
			PORTD |= (1 << PORTD2);
 2ba:	5a 9a       	sbi	0x0b, 2	; 11
			PORTB &= ~(1 << PORTB7);
 2bc:	2f 98       	cbi	0x05, 7	; 5
			PORTB &= ~(1 << PORTB4);
 2be:	2c 98       	cbi	0x05, 4	; 5
			PORTC &= ~(1 << PORTC1);
 2c0:	41 98       	cbi	0x08, 1	; 8
 2c2:	1b c0       	rjmp	.+54     	; 0x2fa <_Z19DisplayListSequencev+0x82>
 2c4:	fe 01       	movw	r30, r28
 2c6:	32 97       	sbiw	r30, 0x02	; 2
		}
		else if(list[ii].BUT2)
 2c8:	80 81       	ld	r24, Z
 2ca:	88 23       	and	r24, r24
 2cc:	29 f0       	breq	.+10     	; 0x2d8 <_Z19DisplayListSequencev+0x60>
		{
			PORTD &= ~(1 << PORTD2);
 2ce:	5a 98       	cbi	0x0b, 2	; 11
			PORTB |= (1 << PORTB7);
 2d0:	2f 9a       	sbi	0x05, 7	; 5
			PORTB &= ~(1 << PORTB4);
 2d2:	2c 98       	cbi	0x05, 4	; 5
			PORTC &= ~(1 << PORTC1);
 2d4:	41 98       	cbi	0x08, 1	; 8
 2d6:	11 c0       	rjmp	.+34     	; 0x2fa <_Z19DisplayListSequencev+0x82>
 2d8:	fe 01       	movw	r30, r28
 2da:	31 97       	sbiw	r30, 0x01	; 1
		}
		else if(list[ii].SCK)
 2dc:	80 81       	ld	r24, Z
 2de:	88 23       	and	r24, r24
 2e0:	29 f0       	breq	.+10     	; 0x2ec <_Z19DisplayListSequencev+0x74>
		{
			PORTD &= ~(1 << PORTD2);
 2e2:	5a 98       	cbi	0x0b, 2	; 11
			PORTB &= ~(1 << PORTB7);
 2e4:	2f 98       	cbi	0x05, 7	; 5
			PORTB |= (1 << PORTB4);
 2e6:	2c 9a       	sbi	0x05, 4	; 5
			PORTC &= ~(1 << PORTC1);
 2e8:	41 98       	cbi	0x08, 1	; 8
 2ea:	07 c0       	rjmp	.+14     	; 0x2fa <_Z19DisplayListSequencev+0x82>
		}
		else if(list[ii].BUT3)
 2ec:	88 81       	ld	r24, Y
 2ee:	88 23       	and	r24, r24
 2f0:	21 f0       	breq	.+8      	; 0x2fa <_Z19DisplayListSequencev+0x82>
		{
			PORTD &= ~(1 << PORTD2);
 2f2:	5a 98       	cbi	0x0b, 2	; 11
			PORTB &= ~(1 << PORTB7);
 2f4:	2f 98       	cbi	0x05, 7	; 5
			PORTB &= ~(1 << PORTB4);
 2f6:	2c 98       	cbi	0x05, 4	; 5
			PORTC |= (1 << PORTC1);
 2f8:	41 9a       	sbi	0x08, 1	; 8
 2fa:	83 e2       	ldi	r24, 0x23	; 35
 2fc:	94 ef       	ldi	r25, 0xF4	; 244
 2fe:	01 97       	sbiw	r24, 0x01	; 1
 300:	f1 f7       	brne	.-4      	; 0x2fe <_Z19DisplayListSequencev+0x86>
 302:	00 c0       	rjmp	.+0      	; 0x304 <_Z19DisplayListSequencev+0x8c>
 304:	00 00       	nop
		}
		_delay_ms(250);
		ClearLeds();
 306:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z9ClearLedsv>
 30a:	83 e2       	ldi	r24, 0x23	; 35
 30c:	94 ef       	ldi	r25, 0xF4	; 244
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <_Z19DisplayListSequencev+0x96>
 312:	00 c0       	rjmp	.+0      	; 0x314 <_Z19DisplayListSequencev+0x9c>
 314:	00 00       	nop
}
// display the list sequence using leds. 
void DisplayListSequence(void)
{
	list[4].BUT1 == true;
	for(int ii = j; ii >= 0 ; ii --)
 316:	01 50       	subi	r16, 0x01	; 1
 318:	11 09       	sbc	r17, r1
 31a:	28 f6       	brcc	.-118    	; 0x2a6 <_Z19DisplayListSequencev+0x2e>
		}
		_delay_ms(250);
		ClearLeds();
		_delay_ms(250);
	}
}
 31c:	df 91       	pop	r29
 31e:	cf 91       	pop	r28
 320:	1f 91       	pop	r17
 322:	0f 91       	pop	r16
 324:	08 95       	ret

00000326 <_Z9CheckListv>:
// function that determines if the user entered in the correct sequence.
bool CheckList(void)
{
	if( 
		roundList.BUT1 == list[k].BUT1 &&
 326:	80 91 05 01 	lds	r24, 0x0105
 32a:	90 91 06 01 	lds	r25, 0x0106
 32e:	fc 01       	movw	r30, r24
 330:	ee 0f       	add	r30, r30
 332:	ff 1f       	adc	r31, r31
 334:	ee 0f       	add	r30, r30
 336:	ff 1f       	adc	r31, r31
 338:	e2 5f       	subi	r30, 0xF2	; 242
 33a:	fe 4f       	sbci	r31, 0xFE	; 254
	}
}
// function that determines if the user entered in the correct sequence.
bool CheckList(void)
{
	if( 
 33c:	30 91 0a 01 	lds	r19, 0x010A
 340:	20 81       	ld	r18, Z
 342:	32 13       	cpse	r19, r18
 344:	27 c0       	rjmp	.+78     	; 0x394 <_Z9CheckListv+0x6e>
		roundList.BUT1 == list[k].BUT1 &&
		roundList.BUT2 == list[k].BUT2 &&
 346:	fc 01       	movw	r30, r24
 348:	ee 0f       	add	r30, r30
 34a:	ff 1f       	adc	r31, r31
 34c:	ee 0f       	add	r30, r30
 34e:	ff 1f       	adc	r31, r31
 350:	e2 5f       	subi	r30, 0xF2	; 242
 352:	fe 4f       	sbci	r31, 0xFE	; 254
}
// function that determines if the user entered in the correct sequence.
bool CheckList(void)
{
	if( 
		roundList.BUT1 == list[k].BUT1 &&
 354:	30 91 0b 01 	lds	r19, 0x010B
 358:	21 81       	ldd	r18, Z+1	; 0x01
 35a:	32 13       	cpse	r19, r18
 35c:	1d c0       	rjmp	.+58     	; 0x398 <_Z9CheckListv+0x72>
		roundList.BUT2 == list[k].BUT2 &&
		roundList.SCK == list[k].SCK &&
 35e:	fc 01       	movw	r30, r24
 360:	ee 0f       	add	r30, r30
 362:	ff 1f       	adc	r31, r31
 364:	ee 0f       	add	r30, r30
 366:	ff 1f       	adc	r31, r31
 368:	e2 5f       	subi	r30, 0xF2	; 242
 36a:	fe 4f       	sbci	r31, 0xFE	; 254
// function that determines if the user entered in the correct sequence.
bool CheckList(void)
{
	if( 
		roundList.BUT1 == list[k].BUT1 &&
		roundList.BUT2 == list[k].BUT2 &&
 36c:	30 91 0c 01 	lds	r19, 0x010C
 370:	22 81       	ldd	r18, Z+2	; 0x02
 372:	32 13       	cpse	r19, r18
 374:	13 c0       	rjmp	.+38     	; 0x39c <_Z9CheckListv+0x76>
		roundList.SCK == list[k].SCK &&
		roundList.BUT3 == list[k].BUT3
 376:	fc 01       	movw	r30, r24
 378:	ee 0f       	add	r30, r30
 37a:	ff 1f       	adc	r31, r31
 37c:	ee 0f       	add	r30, r30
 37e:	ff 1f       	adc	r31, r31
 380:	e2 5f       	subi	r30, 0xF2	; 242
 382:	fe 4f       	sbci	r31, 0xFE	; 254
bool CheckList(void)
{
	if( 
		roundList.BUT1 == list[k].BUT1 &&
		roundList.BUT2 == list[k].BUT2 &&
		roundList.SCK == list[k].SCK &&
 384:	81 e0       	ldi	r24, 0x01	; 1
 386:	20 91 0d 01 	lds	r18, 0x010D
 38a:	93 81       	ldd	r25, Z+3	; 0x03
 38c:	29 17       	cp	r18, r25
 38e:	39 f0       	breq	.+14     	; 0x39e <_Z9CheckListv+0x78>
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	08 95       	ret
	{
		return true;
	}
	else 
	{
		return false;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	08 95       	ret
 398:	80 e0       	ldi	r24, 0x00	; 0
 39a:	08 95       	ret
 39c:	80 e0       	ldi	r24, 0x00	; 0
	}
}
 39e:	08 95       	ret

000003a0 <main>:
int main()
{
	InitGpio();
 3a0:	0e 94 58 00 	call	0xb0	; 0xb0 <_Z8InitGpiov>
	InitInterrupts();
 3a4:	0e 94 67 00 	call	0xce	; 0xce <_Z14InitInterruptsv>
	InitAdc();
 3a8:	0e 94 22 01 	call	0x244	; 0x244 <_Z7InitAdcv>
	srand(AdcRead()); // seed random number generator;
 3ac:	0e 94 28 01 	call	0x250	; 0x250 <_Z7AdcReadv>
 3b0:	0e 94 65 03 	call	0x6ca	; 0x6ca <srand>
	FillList(); // create list
 3b4:	0e 94 9a 00 	call	0x134	; 0x134 <_Z8FillListv>
	stillCorrect = true;
 3b8:	81 e0       	ldi	r24, 0x01	; 1
 3ba:	80 93 04 01 	sts	0x0104, r24
	j = 0; 
 3be:	10 92 9f 02 	sts	0x029F, r1
 3c2:	10 92 9e 02 	sts	0x029E, r1
	k = 0;
 3c6:	10 92 06 01 	sts	0x0106, r1
 3ca:	10 92 05 01 	sts	0x0105, r1
		while(stillCorrect)
		{
			
			k = j;
			DisplayListSequence();
			checkingRound = true;
 3ce:	c1 e0       	ldi	r28, 0x01	; 1
 3d0:	34 c0       	rjmp	.+104    	; 0x43a <main+0x9a>
	while(1)
	{
		while(stillCorrect)
		{
			
			k = j;
 3d2:	80 91 9e 02 	lds	r24, 0x029E
 3d6:	90 91 9f 02 	lds	r25, 0x029F
 3da:	90 93 06 01 	sts	0x0106, r25
 3de:	80 93 05 01 	sts	0x0105, r24
			DisplayListSequence();
 3e2:	0e 94 3c 01 	call	0x278	; 0x278 <_Z19DisplayListSequencev>
			checkingRound = true;
 3e6:	c0 93 08 01 	sts	0x0108, r28
			while(k >= 0 && stillCorrect)
 3ea:	80 91 05 01 	lds	r24, 0x0105
 3ee:	90 91 06 01 	lds	r25, 0x0106
 3f2:	99 23       	and	r25, r25
 3f4:	bc f0       	brlt	.+46     	; 0x424 <main+0x84>
 3f6:	80 91 04 01 	lds	r24, 0x0104
 3fa:	88 23       	and	r24, r24
 3fc:	99 f0       	breq	.+38     	; 0x424 <main+0x84>
 3fe:	2f e3       	ldi	r18, 0x3F	; 63
 400:	8d e0       	ldi	r24, 0x0D	; 13
 402:	93 e0       	ldi	r25, 0x03	; 3
 404:	21 50       	subi	r18, 0x01	; 1
 406:	80 40       	sbci	r24, 0x00	; 0
 408:	90 40       	sbci	r25, 0x00	; 0
 40a:	e1 f7       	brne	.-8      	; 0x404 <main+0x64>
 40c:	00 c0       	rjmp	.+0      	; 0x40e <main+0x6e>
 40e:	00 00       	nop
 410:	80 91 05 01 	lds	r24, 0x0105
 414:	90 91 06 01 	lds	r25, 0x0106
 418:	99 23       	and	r25, r25
 41a:	24 f0       	brlt	.+8      	; 0x424 <main+0x84>
 41c:	80 91 04 01 	lds	r24, 0x0104
 420:	81 11       	cpse	r24, r1
 422:	ed cf       	rjmp	.-38     	; 0x3fe <main+0x5e>
	}
}
// clear flags 
void ClearFlags(void)
{
	commonFlag = false;
 424:	10 92 09 01 	sts	0x0109, r1
			while(k >= 0 && stillCorrect)
			{
				_delay_ms(delayTime);
			}
			ClearFlags();	
			j ++;
 428:	80 91 9e 02 	lds	r24, 0x029E
 42c:	90 91 9f 02 	lds	r25, 0x029F
 430:	01 96       	adiw	r24, 0x01	; 1
 432:	90 93 9f 02 	sts	0x029F, r25
 436:	80 93 9e 02 	sts	0x029E, r24
	stillCorrect = true;
	j = 0; 
	k = 0;
	while(1)
	{
		while(stillCorrect)
 43a:	80 91 04 01 	lds	r24, 0x0104
 43e:	81 11       	cpse	r24, r1
 440:	c8 cf       	rjmp	.-112    	; 0x3d2 <main+0x32>
				_delay_ms(delayTime);
			}
			ClearFlags();	
			j ++;
		}
		BlinkLeds();
 442:	0e 94 86 00 	call	0x10c	; 0x10c <_Z9BlinkLedsv>
	else 
	{
		return false;
	}
}
int main()
 446:	f9 cf       	rjmp	.-14     	; 0x43a <main+0x9a>

00000448 <__vector_3>:
		BlinkLeds();
	}
}
// interrupt services
ISR (PCINT0_vect)
{
 448:	1f 92       	push	r1
 44a:	0f 92       	push	r0
 44c:	0f b6       	in	r0, 0x3f	; 63
 44e:	0f 92       	push	r0
 450:	11 24       	eor	r1, r1
 452:	2f 93       	push	r18
 454:	3f 93       	push	r19
 456:	4f 93       	push	r20
 458:	5f 93       	push	r21
 45a:	6f 93       	push	r22
 45c:	7f 93       	push	r23
 45e:	8f 93       	push	r24
 460:	9f 93       	push	r25
 462:	af 93       	push	r26
 464:	bf 93       	push	r27
 466:	ef 93       	push	r30
 468:	ff 93       	push	r31
	if ( (PINB & (1 << PINB5)) == 0)
 46a:	1d 99       	sbic	0x03, 5	; 3
 46c:	20 c0       	rjmp	.+64     	; 0x4ae <__vector_3+0x66>
	{
		commonFlag = true; 
 46e:	21 e0       	ldi	r18, 0x01	; 1
 470:	20 93 09 01 	sts	0x0109, r18
		PORTB |= (1 << PORTB4);			 
 474:	2c 9a       	sbi	0x05, 4	; 5
		k --; // to signify that we are checking to see if buttons have been pressed
 476:	80 91 05 01 	lds	r24, 0x0105
 47a:	90 91 06 01 	lds	r25, 0x0106
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	90 93 06 01 	sts	0x0106, r25
 484:	80 93 05 01 	sts	0x0105, r24
		roundList.BUT1 = false;
 488:	10 92 0a 01 	sts	0x010A, r1
		roundList.BUT2 = false; 
 48c:	10 92 0b 01 	sts	0x010B, r1
		roundList.SCK = true;
 490:	20 93 0c 01 	sts	0x010C, r18
		roundList.BUT3 = false; 
 494:	10 92 0d 01 	sts	0x010D, r1
 498:	83 e2       	ldi	r24, 0x23	; 35
 49a:	94 ef       	ldi	r25, 0xF4	; 244
 49c:	01 97       	sbiw	r24, 0x01	; 1
 49e:	f1 f7       	brne	.-4      	; 0x49c <__vector_3+0x54>
 4a0:	00 c0       	rjmp	.+0      	; 0x4a2 <__vector_3+0x5a>
 4a2:	00 00       	nop
		_delay_ms(250); 
		stillCorrect = CheckList();
 4a4:	0e 94 93 01 	call	0x326	; 0x326 <_Z9CheckListv>
 4a8:	80 93 04 01 	sts	0x0104, r24
		PORTB &= ~(1 << PORTB4); 
 4ac:	2c 98       	cbi	0x05, 4	; 5
	}
}
 4ae:	ff 91       	pop	r31
 4b0:	ef 91       	pop	r30
 4b2:	bf 91       	pop	r27
 4b4:	af 91       	pop	r26
 4b6:	9f 91       	pop	r25
 4b8:	8f 91       	pop	r24
 4ba:	7f 91       	pop	r23
 4bc:	6f 91       	pop	r22
 4be:	5f 91       	pop	r21
 4c0:	4f 91       	pop	r20
 4c2:	3f 91       	pop	r19
 4c4:	2f 91       	pop	r18
 4c6:	0f 90       	pop	r0
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	0f 90       	pop	r0
 4cc:	1f 90       	pop	r1
 4ce:	18 95       	reti

000004d0 <__vector_4>:
ISR (PCINT1_vect)
{
 4d0:	1f 92       	push	r1
 4d2:	0f 92       	push	r0
 4d4:	0f b6       	in	r0, 0x3f	; 63
 4d6:	0f 92       	push	r0
 4d8:	11 24       	eor	r1, r1
 4da:	2f 93       	push	r18
 4dc:	3f 93       	push	r19
 4de:	4f 93       	push	r20
 4e0:	5f 93       	push	r21
 4e2:	6f 93       	push	r22
 4e4:	7f 93       	push	r23
 4e6:	8f 93       	push	r24
 4e8:	9f 93       	push	r25
 4ea:	af 93       	push	r26
 4ec:	bf 93       	push	r27
 4ee:	ef 93       	push	r30
 4f0:	ff 93       	push	r31
	if ( (PINC & (1 << PINC2)) == 0)
 4f2:	32 99       	sbic	0x06, 2	; 6
 4f4:	20 c0       	rjmp	.+64     	; 0x536 <__vector_4+0x66>
	{
		commonFlag = true;
 4f6:	21 e0       	ldi	r18, 0x01	; 1
 4f8:	20 93 09 01 	sts	0x0109, r18
		
			 PORTC |= (1 << PORTC1);
 4fc:	41 9a       	sbi	0x08, 1	; 8
			 k --; // to signify that we are checking to see if buttons have been pressed
 4fe:	80 91 05 01 	lds	r24, 0x0105
 502:	90 91 06 01 	lds	r25, 0x0106
 506:	01 97       	sbiw	r24, 0x01	; 1
 508:	90 93 06 01 	sts	0x0106, r25
 50c:	80 93 05 01 	sts	0x0105, r24
			 roundList.BUT1 = false;
 510:	10 92 0a 01 	sts	0x010A, r1
			 roundList.BUT2 = false;
 514:	10 92 0b 01 	sts	0x010B, r1
			 roundList.SCK = false;
 518:	10 92 0c 01 	sts	0x010C, r1
			 roundList.BUT3 = true;
 51c:	20 93 0d 01 	sts	0x010D, r18
 520:	83 e2       	ldi	r24, 0x23	; 35
 522:	94 ef       	ldi	r25, 0xF4	; 244
 524:	01 97       	sbiw	r24, 0x01	; 1
 526:	f1 f7       	brne	.-4      	; 0x524 <__vector_4+0x54>
 528:	00 c0       	rjmp	.+0      	; 0x52a <__vector_4+0x5a>
 52a:	00 00       	nop
			 _delay_ms(250);
			 stillCorrect = CheckList();
 52c:	0e 94 93 01 	call	0x326	; 0x326 <_Z9CheckListv>
 530:	80 93 04 01 	sts	0x0104, r24
		 	 PORTC &= ~(1 << PORTC1);
 534:	41 98       	cbi	0x08, 1	; 8
	} 
}
 536:	ff 91       	pop	r31
 538:	ef 91       	pop	r30
 53a:	bf 91       	pop	r27
 53c:	af 91       	pop	r26
 53e:	9f 91       	pop	r25
 540:	8f 91       	pop	r24
 542:	7f 91       	pop	r23
 544:	6f 91       	pop	r22
 546:	5f 91       	pop	r21
 548:	4f 91       	pop	r20
 54a:	3f 91       	pop	r19
 54c:	2f 91       	pop	r18
 54e:	0f 90       	pop	r0
 550:	0f be       	out	0x3f, r0	; 63
 552:	0f 90       	pop	r0
 554:	1f 90       	pop	r1
 556:	18 95       	reti

00000558 <__vector_5>:
ISR (PCINT2_vect)
{
 558:	1f 92       	push	r1
 55a:	0f 92       	push	r0
 55c:	0f b6       	in	r0, 0x3f	; 63
 55e:	0f 92       	push	r0
 560:	11 24       	eor	r1, r1
 562:	2f 93       	push	r18
 564:	3f 93       	push	r19
 566:	4f 93       	push	r20
 568:	5f 93       	push	r21
 56a:	6f 93       	push	r22
 56c:	7f 93       	push	r23
 56e:	8f 93       	push	r24
 570:	9f 93       	push	r25
 572:	af 93       	push	r26
 574:	bf 93       	push	r27
 576:	ef 93       	push	r30
 578:	ff 93       	push	r31
	if ( (PIND & (1 << PIND5)) == 0) 
 57a:	4d 99       	sbic	0x09, 5	; 9
 57c:	20 c0       	rjmp	.+64     	; 0x5be <__vector_5+0x66>
	{ 
		commonFlag = true;
 57e:	21 e0       	ldi	r18, 0x01	; 1
 580:	20 93 09 01 	sts	0x0109, r18
		
			PORTB |= (1 << PORTB7); 
 584:	2f 9a       	sbi	0x05, 7	; 5
			k --; // to signify that we are checking to see if buttons have been pressed
 586:	80 91 05 01 	lds	r24, 0x0105
 58a:	90 91 06 01 	lds	r25, 0x0106
 58e:	01 97       	sbiw	r24, 0x01	; 1
 590:	90 93 06 01 	sts	0x0106, r25
 594:	80 93 05 01 	sts	0x0105, r24
			roundList.BUT1 = false;
 598:	10 92 0a 01 	sts	0x010A, r1
			roundList.BUT2 = true;
 59c:	20 93 0b 01 	sts	0x010B, r18
			roundList.SCK = false;
 5a0:	10 92 0c 01 	sts	0x010C, r1
			roundList.BUT3 = false;
 5a4:	10 92 0d 01 	sts	0x010D, r1
 5a8:	83 e2       	ldi	r24, 0x23	; 35
 5aa:	94 ef       	ldi	r25, 0xF4	; 244
 5ac:	01 97       	sbiw	r24, 0x01	; 1
 5ae:	f1 f7       	brne	.-4      	; 0x5ac <__vector_5+0x54>
 5b0:	00 c0       	rjmp	.+0      	; 0x5b2 <__vector_5+0x5a>
 5b2:	00 00       	nop
			_delay_ms(250);
			stillCorrect = CheckList();
 5b4:	0e 94 93 01 	call	0x326	; 0x326 <_Z9CheckListv>
 5b8:	80 93 04 01 	sts	0x0104, r24
			PORTB &= ~(1 << PORTB7);
 5bc:	2f 98       	cbi	0x05, 7	; 5
	} 
	
	if ( (PIND & (1 << PIND3)) == 0)
 5be:	4b 99       	sbic	0x09, 3	; 9
 5c0:	20 c0       	rjmp	.+64     	; 0x602 <__vector_5+0xaa>
	{ 
		commonFlag = true;
 5c2:	21 e0       	ldi	r18, 0x01	; 1
 5c4:	20 93 09 01 	sts	0x0109, r18
		
			PORTD |= (1 << PORTD2);
 5c8:	5a 9a       	sbi	0x0b, 2	; 11
			k --; // to signify that we are checking to see if buttons have been pressed
 5ca:	80 91 05 01 	lds	r24, 0x0105
 5ce:	90 91 06 01 	lds	r25, 0x0106
 5d2:	01 97       	sbiw	r24, 0x01	; 1
 5d4:	90 93 06 01 	sts	0x0106, r25
 5d8:	80 93 05 01 	sts	0x0105, r24
			roundList.BUT1 = true;
 5dc:	20 93 0a 01 	sts	0x010A, r18
			roundList.BUT2 = false;
 5e0:	10 92 0b 01 	sts	0x010B, r1
			roundList.SCK = false;
 5e4:	10 92 0c 01 	sts	0x010C, r1
			roundList.BUT3 = false;
 5e8:	10 92 0d 01 	sts	0x010D, r1
 5ec:	83 e2       	ldi	r24, 0x23	; 35
 5ee:	94 ef       	ldi	r25, 0xF4	; 244
 5f0:	01 97       	sbiw	r24, 0x01	; 1
 5f2:	f1 f7       	brne	.-4      	; 0x5f0 <__vector_5+0x98>
 5f4:	00 c0       	rjmp	.+0      	; 0x5f6 <__vector_5+0x9e>
 5f6:	00 00       	nop
			_delay_ms(250);
			stillCorrect = CheckList();
 5f8:	0e 94 93 01 	call	0x326	; 0x326 <_Z9CheckListv>
 5fc:	80 93 04 01 	sts	0x0104, r24
			PORTD &= ~(1 << PORTD2);
 600:	5a 98       	cbi	0x0b, 2	; 11
	} 
}
 602:	ff 91       	pop	r31
 604:	ef 91       	pop	r30
 606:	bf 91       	pop	r27
 608:	af 91       	pop	r26
 60a:	9f 91       	pop	r25
 60c:	8f 91       	pop	r24
 60e:	7f 91       	pop	r23
 610:	6f 91       	pop	r22
 612:	5f 91       	pop	r21
 614:	4f 91       	pop	r20
 616:	3f 91       	pop	r19
 618:	2f 91       	pop	r18
 61a:	0f 90       	pop	r0
 61c:	0f be       	out	0x3f, r0	; 63
 61e:	0f 90       	pop	r0
 620:	1f 90       	pop	r1
 622:	18 95       	reti

00000624 <do_rand>:
 624:	8f 92       	push	r8
 626:	9f 92       	push	r9
 628:	af 92       	push	r10
 62a:	bf 92       	push	r11
 62c:	cf 92       	push	r12
 62e:	df 92       	push	r13
 630:	ef 92       	push	r14
 632:	ff 92       	push	r15
 634:	cf 93       	push	r28
 636:	df 93       	push	r29
 638:	ec 01       	movw	r28, r24
 63a:	68 81       	ld	r22, Y
 63c:	79 81       	ldd	r23, Y+1	; 0x01
 63e:	8a 81       	ldd	r24, Y+2	; 0x02
 640:	9b 81       	ldd	r25, Y+3	; 0x03
 642:	61 15       	cp	r22, r1
 644:	71 05       	cpc	r23, r1
 646:	81 05       	cpc	r24, r1
 648:	91 05       	cpc	r25, r1
 64a:	21 f4       	brne	.+8      	; 0x654 <do_rand+0x30>
 64c:	64 e2       	ldi	r22, 0x24	; 36
 64e:	79 ed       	ldi	r23, 0xD9	; 217
 650:	8b e5       	ldi	r24, 0x5B	; 91
 652:	97 e0       	ldi	r25, 0x07	; 7
 654:	2d e1       	ldi	r18, 0x1D	; 29
 656:	33 ef       	ldi	r19, 0xF3	; 243
 658:	41 e0       	ldi	r20, 0x01	; 1
 65a:	50 e0       	ldi	r21, 0x00	; 0
 65c:	0e 94 70 03 	call	0x6e0	; 0x6e0 <__divmodsi4>
 660:	49 01       	movw	r8, r18
 662:	5a 01       	movw	r10, r20
 664:	9b 01       	movw	r18, r22
 666:	ac 01       	movw	r20, r24
 668:	a7 ea       	ldi	r26, 0xA7	; 167
 66a:	b1 e4       	ldi	r27, 0x41	; 65
 66c:	0e 94 8f 03 	call	0x71e	; 0x71e <__muluhisi3>
 670:	6b 01       	movw	r12, r22
 672:	7c 01       	movw	r14, r24
 674:	ac ee       	ldi	r26, 0xEC	; 236
 676:	b4 ef       	ldi	r27, 0xF4	; 244
 678:	a5 01       	movw	r20, r10
 67a:	94 01       	movw	r18, r8
 67c:	0e 94 9d 03 	call	0x73a	; 0x73a <__mulohisi3>
 680:	c6 0e       	add	r12, r22
 682:	d7 1e       	adc	r13, r23
 684:	e8 1e       	adc	r14, r24
 686:	f9 1e       	adc	r15, r25
 688:	f7 fe       	sbrs	r15, 7
 68a:	06 c0       	rjmp	.+12     	; 0x698 <do_rand+0x74>
 68c:	81 e0       	ldi	r24, 0x01	; 1
 68e:	c8 1a       	sub	r12, r24
 690:	d1 08       	sbc	r13, r1
 692:	e1 08       	sbc	r14, r1
 694:	80 e8       	ldi	r24, 0x80	; 128
 696:	f8 0a       	sbc	r15, r24
 698:	c8 82       	st	Y, r12
 69a:	d9 82       	std	Y+1, r13	; 0x01
 69c:	ea 82       	std	Y+2, r14	; 0x02
 69e:	fb 82       	std	Y+3, r15	; 0x03
 6a0:	c6 01       	movw	r24, r12
 6a2:	9f 77       	andi	r25, 0x7F	; 127
 6a4:	df 91       	pop	r29
 6a6:	cf 91       	pop	r28
 6a8:	ff 90       	pop	r15
 6aa:	ef 90       	pop	r14
 6ac:	df 90       	pop	r13
 6ae:	cf 90       	pop	r12
 6b0:	bf 90       	pop	r11
 6b2:	af 90       	pop	r10
 6b4:	9f 90       	pop	r9
 6b6:	8f 90       	pop	r8
 6b8:	08 95       	ret

000006ba <rand_r>:
 6ba:	0e 94 12 03 	call	0x624	; 0x624 <do_rand>
 6be:	08 95       	ret

000006c0 <rand>:
 6c0:	80 e0       	ldi	r24, 0x00	; 0
 6c2:	91 e0       	ldi	r25, 0x01	; 1
 6c4:	0e 94 12 03 	call	0x624	; 0x624 <do_rand>
 6c8:	08 95       	ret

000006ca <srand>:
 6ca:	a0 e0       	ldi	r26, 0x00	; 0
 6cc:	b0 e0       	ldi	r27, 0x00	; 0
 6ce:	80 93 00 01 	sts	0x0100, r24
 6d2:	90 93 01 01 	sts	0x0101, r25
 6d6:	a0 93 02 01 	sts	0x0102, r26
 6da:	b0 93 03 01 	sts	0x0103, r27
 6de:	08 95       	ret

000006e0 <__divmodsi4>:
 6e0:	05 2e       	mov	r0, r21
 6e2:	97 fb       	bst	r25, 7
 6e4:	1e f4       	brtc	.+6      	; 0x6ec <__divmodsi4+0xc>
 6e6:	00 94       	com	r0
 6e8:	0e 94 87 03 	call	0x70e	; 0x70e <__negsi2>
 6ec:	57 fd       	sbrc	r21, 7
 6ee:	07 d0       	rcall	.+14     	; 0x6fe <__divmodsi4_neg2>
 6f0:	0e 94 a2 03 	call	0x744	; 0x744 <__udivmodsi4>
 6f4:	07 fc       	sbrc	r0, 7
 6f6:	03 d0       	rcall	.+6      	; 0x6fe <__divmodsi4_neg2>
 6f8:	4e f4       	brtc	.+18     	; 0x70c <__divmodsi4_exit>
 6fa:	0c 94 87 03 	jmp	0x70e	; 0x70e <__negsi2>

000006fe <__divmodsi4_neg2>:
 6fe:	50 95       	com	r21
 700:	40 95       	com	r20
 702:	30 95       	com	r19
 704:	21 95       	neg	r18
 706:	3f 4f       	sbci	r19, 0xFF	; 255
 708:	4f 4f       	sbci	r20, 0xFF	; 255
 70a:	5f 4f       	sbci	r21, 0xFF	; 255

0000070c <__divmodsi4_exit>:
 70c:	08 95       	ret

0000070e <__negsi2>:
 70e:	90 95       	com	r25
 710:	80 95       	com	r24
 712:	70 95       	com	r23
 714:	61 95       	neg	r22
 716:	7f 4f       	sbci	r23, 0xFF	; 255
 718:	8f 4f       	sbci	r24, 0xFF	; 255
 71a:	9f 4f       	sbci	r25, 0xFF	; 255
 71c:	08 95       	ret

0000071e <__muluhisi3>:
 71e:	0e 94 c4 03 	call	0x788	; 0x788 <__umulhisi3>
 722:	a5 9f       	mul	r26, r21
 724:	90 0d       	add	r25, r0
 726:	b4 9f       	mul	r27, r20
 728:	90 0d       	add	r25, r0
 72a:	a4 9f       	mul	r26, r20
 72c:	80 0d       	add	r24, r0
 72e:	91 1d       	adc	r25, r1
 730:	11 24       	eor	r1, r1
 732:	08 95       	ret

00000734 <__mulshisi3>:
 734:	b7 ff       	sbrs	r27, 7
 736:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__muluhisi3>

0000073a <__mulohisi3>:
 73a:	0e 94 8f 03 	call	0x71e	; 0x71e <__muluhisi3>
 73e:	82 1b       	sub	r24, r18
 740:	93 0b       	sbc	r25, r19
 742:	08 95       	ret

00000744 <__udivmodsi4>:
 744:	a1 e2       	ldi	r26, 0x21	; 33
 746:	1a 2e       	mov	r1, r26
 748:	aa 1b       	sub	r26, r26
 74a:	bb 1b       	sub	r27, r27
 74c:	fd 01       	movw	r30, r26
 74e:	0d c0       	rjmp	.+26     	; 0x76a <__udivmodsi4_ep>

00000750 <__udivmodsi4_loop>:
 750:	aa 1f       	adc	r26, r26
 752:	bb 1f       	adc	r27, r27
 754:	ee 1f       	adc	r30, r30
 756:	ff 1f       	adc	r31, r31
 758:	a2 17       	cp	r26, r18
 75a:	b3 07       	cpc	r27, r19
 75c:	e4 07       	cpc	r30, r20
 75e:	f5 07       	cpc	r31, r21
 760:	20 f0       	brcs	.+8      	; 0x76a <__udivmodsi4_ep>
 762:	a2 1b       	sub	r26, r18
 764:	b3 0b       	sbc	r27, r19
 766:	e4 0b       	sbc	r30, r20
 768:	f5 0b       	sbc	r31, r21

0000076a <__udivmodsi4_ep>:
 76a:	66 1f       	adc	r22, r22
 76c:	77 1f       	adc	r23, r23
 76e:	88 1f       	adc	r24, r24
 770:	99 1f       	adc	r25, r25
 772:	1a 94       	dec	r1
 774:	69 f7       	brne	.-38     	; 0x750 <__udivmodsi4_loop>
 776:	60 95       	com	r22
 778:	70 95       	com	r23
 77a:	80 95       	com	r24
 77c:	90 95       	com	r25
 77e:	9b 01       	movw	r18, r22
 780:	ac 01       	movw	r20, r24
 782:	bd 01       	movw	r22, r26
 784:	cf 01       	movw	r24, r30
 786:	08 95       	ret

00000788 <__umulhisi3>:
 788:	a2 9f       	mul	r26, r18
 78a:	b0 01       	movw	r22, r0
 78c:	b3 9f       	mul	r27, r19
 78e:	c0 01       	movw	r24, r0
 790:	a3 9f       	mul	r26, r19
 792:	70 0d       	add	r23, r0
 794:	81 1d       	adc	r24, r1
 796:	11 24       	eor	r1, r1
 798:	91 1d       	adc	r25, r1
 79a:	b2 9f       	mul	r27, r18
 79c:	70 0d       	add	r23, r0
 79e:	81 1d       	adc	r24, r1
 7a0:	11 24       	eor	r1, r1
 7a2:	91 1d       	adc	r25, r1
 7a4:	08 95       	ret

000007a6 <_exit>:
 7a6:	f8 94       	cli

000007a8 <__stop_program>:
 7a8:	ff cf       	rjmp	.-2      	; 0x7a8 <__stop_program>
